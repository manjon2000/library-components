import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export class CalendarService {
    constructor() {
        this._initWeeks = new BehaviorSubject([]);
        this.initWeeks$ = this._initWeeks.asObservable();
    }
    decomposeMonthIntoWeeks(year, month, type, isShowDaysOtherMonth, startDate, endDate) {
        const getTotalDaysInMonth = (year, month) => {
            const daysInMonth = [31, this.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
            return daysInMonth[month - 1];
        };
        const diffDaysOfFirstWeek = this.getDiffDaysOfWeek(year, month);
        const totalDaysInMonth = getTotalDaysInMonth(year, month);
        const weeks = [];
        let currentWeek = [];
        if (isShowDaysOtherMonth) {
            const prevMonth = month - 1 < 1 ? 12 : month - 1;
            const prevYear = month - 1 < 1 ? year - 1 : year;
            const totalDaysInPrevMonth = getTotalDaysInMonth(prevYear, prevMonth);
            for (let i = diffDaysOfFirstWeek; i > 0; i--) {
                const prevDate = new Date(prevYear, prevMonth - 1, totalDaysInPrevMonth - i + 1);
                currentWeek.push({
                    isAnotherMonth: true,
                    day: prevDate.getDate(),
                    month: prevDate.getMonth() + 1,
                    year: prevDate.getFullYear(),
                    unix: Math.floor(prevDate.getTime() / 1000),
                    ISO8601: `${prevDate.getFullYear()}-${prevDate.getMonth() + 1}-${prevDate.getDate()}`,
                });
            }
        }
        else {
            for (let i = 0; i < diffDaysOfFirstWeek; i++) {
                currentWeek.push({ day: -1 });
            }
        }
        for (let day = 1; day <= totalDaysInMonth; day++) {
            const currentDate = new Date(year, month - 1, day);
            let buildCurrentWeek = {
                isAnotherMonth: false,
                day: currentDate.getDate(),
                month: currentDate.getMonth() + 1,
                year: currentDate.getFullYear(),
                unix: Math.floor(currentDate.getTime() / 1000),
                ISO8601: `${currentDate.getFullYear()}-${currentDate.getMonth() + 1}-${currentDate.getDate()}`,
            };
            if (type === 'range' && endDate !== undefined) {
                const startDateToUnix = this.formatToUnix(startDate);
                const endDateToUnix = this.formatToUnix(endDate);
                const currentDateToUnix = this.formatToUnix(currentDate);
                if (currentDateToUnix >= startDateToUnix &&
                    currentDateToUnix <= endDateToUnix) {
                    buildCurrentWeek.isSelected = true;
                }
            }
            else {
                buildCurrentWeek.isSelected = false;
            }
            currentWeek.push(buildCurrentWeek);
            if (currentWeek.length === 7) {
                weeks.push(currentWeek);
                currentWeek = [];
            }
        }
        if (currentWeek.length > 0) {
            const nextMonth = month + 1 > 12 ? 1 : month + 1;
            const nextYear = month + 1 > 12 ? year + 1 : year;
            let nextDay = 1;
            while (currentWeek.length < 7) {
                const nextDate = new Date(nextYear, nextMonth - 1, nextDay);
                currentWeek.push({
                    isAnotherMonth: true,
                    day: nextDate.getDate(),
                    month: nextDate.getMonth() + 1,
                    year: nextDate.getFullYear(),
                    unix: Math.floor(nextDate.getTime() / 1000),
                    ISO8601: `${nextDate.getFullYear()}-${nextDate.getMonth() + 1}-${nextDate.getDate()}`,
                });
                nextDay++;
            }
            weeks.push(currentWeek);
        }
        this._initWeeks.next(weeks);
    }
    onSelectedDateSingle(ISO8601) {
        const newDate = new Date(ISO8601);
        newDate.setHours(0, 0, 0, 0);
        return newDate;
    }
    getDayOfWeek(date) {
        return date.getDay();
    }
    getDaysFromAnotherMonth(event, date, index) {
        switch (event) {
            case 'prev':
                return new Date(new Date(date).setDate(date.getDate() - (index + 1)));
            case 'next':
                return new Date(new Date(date).setDate(date.getDate() + (index + 1)));
        }
    }
    getDiffDaysOfWeek(year, month) {
        const m = month < 3 ? month + 12 : month;
        const y = month < 3 ? year - 1 : year;
        const k = Math.floor(y / 100);
        const j = y % 100;
        const dayOfWeek = (1 +
            Math.floor((13 * (m + 1)) / 5) +
            j +
            Math.floor(j / 4) +
            Math.floor(k / 4) -
            2 * k) %
            7;
        return (dayOfWeek + 5) % 7;
    }
    getFirstDayOfMonth(year, month) {
        return new Date(year, (month - 1), 1);
    }
    getLastDayOfMonth(year, month) {
        const firstDayMonth = new Date(year, month + 1, 1);
        return new Date(new Date(firstDayMonth).setDate(firstDayMonth.getDate() - 1));
    }
    getDaysInMonth(date, index) {
        const prevDate = new Date(date).setDate(date.getDate() - index);
        console.log('Date:', prevDate);
        const day = this.getDay(new Date(prevDate));
        const month = this.getMonth(new Date(prevDate));
        const year = this.getYear(new Date(prevDate));
        return parseInt(new Date(prevDate).toLocaleString('es-ES', { day: '2-digit' }));
    }
    formatToUnix(date) {
        const newDate = new Date(date);
        newDate.setHours(0, 0, 0, 0);
        return Math.floor(newDate.getTime() / 1000);
    }
    getTotalDaysInMonth(year, month) {
        // El mes siguiente al actual, y el día 0 del mes siguiente devuelve el último día del mes actual.
        return new Date(year, month + 1, 0).getDate();
    }
    getDay(date) {
        return parseInt(date.toLocaleString('es-ES', { day: '2-digit' }));
    }
    getDayToString(date) {
        return date.toLocaleString('es-ES', { day: '2-digit' });
    }
    getMonth(date) {
        return parseInt(date.toLocaleString('es-ES', { month: '2-digit' }));
    }
    getMonthToString(date) {
        return date.toLocaleString('es-ES', { month: '2-digit' });
    }
    getYear(date) {
        return date.getFullYear();
    }
    isLeapYear(year) {
        return (year % 4 === 0 &&
            (year % 100 !== 0 || year % 400 === 0));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: CalendarService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: CalendarService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: CalendarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,